1. copy below code into the test_file.py
ppe_table_details = """
    'pnr_sample_df' located at '/mnt/stppeedp/ppeedp/raw/eag/ey/eygulshank/pnr_sample/' with the format 'parquet'.
    'distance_master_df' located at '/mnt/stppeedp/ppeedp/raw/eag/ey/eygulshank/distance_master/' with the format 'parquet'.
    'location_master_df' located at '/mnt/stppeedp/ppeedp/raw/eag/ey/eygulshank/location_master' with the format 'parquet'.
    'backtrackexception_master_df' located at '/mnt/stppeedp/ppeedp/raw/eag/ey/eygulshank/backtrackexception_master/' with the format 'parquet'.
"""

local_table_datails = """    
        'pnr_sample_df' located at ‘part-00000-pnr-sample.snappy.parquet' with the format ‘parquet'.
        'distance_master_df' located at 'part-00000-distance-master.snappy.parquet' with the format ‘parquet'.
        'location_master_df' located at 'part-00000-location-master.snappy.parquet' with the format ‘parquet'.
        'backtrackexception_master_df' located at 'part-00000-backtrackexception-master.snappy.parquet' with the format ‘parquet’.
        """

write_mode = 'overwrite'

ppe_write_path = '/mnt/stppeedp/ppeedp/raw/eag/ey/eygulshank/result_set'
local_write_path = 'final_df.parquet'

ppe_write_format = 'delta'
local_write_format = 'parquet'

context = 'local'

2. if you are planning to run it in local then put context = 'local' else put context = 'ppe'
context = 'ppe'    # here context is 'ppe' as it is expected to run in ppe databricks if planning to run in local then put context = 'local'

3. if convert_location_to_decimal is erroring out then replace the function generated with below code.

def convert_location_to_decimal(location):
    try:
        direction = location[-1]
        sign = 1 if direction in ['N', 'E'] else -1
        location = location[:-1]

        # Split the location string by '.' and handle cases with two or more '.' characters
        components = location.split('.')
        degree = components[0]
        minute = components[1] if len(components) > 1 else '0'
        second = components[2] if len(components) > 2 else '0'

        return sign * (int(degree) + int(minute) / 60 + int(second) / 3600)
    except Exception as e:
        return None
